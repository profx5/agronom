================================
Управление зависимостями проекта
================================

Обновление пакетов происходит командой pip-sync. Эта утилита удобнее pip
тем, что не просто установит нужные зависимости, но и удалит все лишние зависимости, не указанные
в файле requirements.txt. Для запуска достаточно запустить pip-sync в директории с requirements.txt::

    pip-sync

requirements.txt в данный момент настроен так, чтобы брать все зависимости из файла
requirements/dev.txt, который включает base- и dev-зависимости.

При первой установке pip-sync в вашем виртуальном окружении может отсутствовать, так что можно
однократно воспользоваться pip install:

    pip install -r requirements.txt

В дальнейшем лучше использовать pip-sync.

Файлы
-----

makefile
    файл для сборки .txt-файлов из .in-файлов
base.in
    файл, в котором руками прописываются базовые зависимости, без которых не работает проект
dev.in
    файл, в который руками прописываются зависимости, облегчающие разработку. Включает в себя
    все зависимости из base.in с тем же версиями
base.txt
    Скомпилированный файл c базовыми зависимостями.
dev.txt
    Скомпилированный файл с зависимостями для разработки.

Добавление новой зависимости
----------------------------

Во-первых, не надо использовать pip install с именем пакета. Это установит пакет локально,
и вы забудете сделать pip freeze и обновить зависимости.

Делаем так:

- редактируем base.in или dev.in для добавления базовой или dev-зависисости
- выполняем команду make
- коммитим как изменившиеся .in-файлы, так и их перекомпилированные .txt-версии

Обновление пакетов происходит командой pip-sync.

Ссылки и литература
-------------------

Структура папки requirements и makefile взяты из статьи
http://jamescooke.info/a-successful-pip-tools-workflow-for-managing-python-package-requirements.html

Общая информация по использованию pip-compile и pip-sync:
https://github.com/jazzband/pip-tools
